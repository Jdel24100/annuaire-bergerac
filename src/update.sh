#!/bin/bash

# Script de mise √† jour automatique pour Annuaire Bergerac
# Sauvegarde les donn√©es actuelles avant mise √† jour

set -e

echo "üîÑ Mise √† jour Annuaire Bergerac"
echo "================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}[√âTAPE]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCC√àS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[ATTENTION]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERREUR]${NC} $1"
}

# Variables
BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"
CURRENT_VERSION=$(cat package.json | grep '"version"' | cut -d'"' -f4)

print_step "Version actuelle: $CURRENT_VERSION"

# Cr√©ation du dossier de sauvegarde
print_step "Cr√©ation de la sauvegarde..."
mkdir -p $BACKUP_DIR

# Sauvegarde des fichiers importants
cp -r components $BACKUP_DIR/
cp -r utils $BACKUP_DIR/
cp -r types $BACKUP_DIR/
cp -r styles $BACKUP_DIR/
cp App.tsx $BACKUP_DIR/
cp package.json $BACKUP_DIR/

# Sauvegarde de la configuration
if [ -f ".env" ]; then
    cp .env $BACKUP_DIR/
fi

if [ -f "utils/supabase/info.tsx" ]; then
    cp utils/supabase/info.tsx $BACKUP_DIR/supabase_config.tsx
fi

print_success "Sauvegarde cr√©√©e dans $BACKUP_DIR"

# V√©rification de Git
if [ -d ".git" ]; then
    print_step "Repository Git d√©tect√©"
    
    # V√©rifier s'il y a des changements non commit√©es
    if ! git diff-index --quiet HEAD --; then
        print_warning "Changements non commit√©es d√©tect√©s"
        read -p "Voulez-vous les committer avant la mise √† jour? (y/N): " COMMIT_CHANGES
        
        if [[ $COMMIT_CHANGES =~ ^[Yy]$ ]]; then
            git add .
            git commit -m "Sauvegarde automatique avant mise √† jour - $(date)"
            print_success "Changements commit√©es"
        fi
    fi
    
    # R√©cup√©rer les derni√®res modifications
    print_step "R√©cup√©ration des derni√®res modifications..."
    git fetch origin
    
    # V√©rifier s'il y a des mises √† jour disponibles
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u})
    
    if [ $LOCAL = $REMOTE ]; then
        print_success "Aucune mise √† jour disponible"
        exit 0
    else
        print_step "Nouvelles modifications disponibles"
        git log --oneline $LOCAL..$REMOTE
        
        read -p "Voulez-vous appliquer ces mises √† jour? (y/N): " APPLY_UPDATES
        
        if [[ $APPLY_UPDATES =~ ^[Yy]$ ]]; then
            git pull origin main
            print_success "Mises √† jour appliqu√©es"
        else
            print_warning "Mise √† jour annul√©e"
            exit 0
        fi
    fi
else
    print_warning "Aucun repository Git trouv√©. Mise √† jour manuelle n√©cessaire."
fi

# V√©rification des nouvelles d√©pendances
print_step "V√©rification des d√©pendances..."
npm install

if [ $? -eq 0 ]; then
    print_success "D√©pendances mises √† jour"
else
    print_error "Erreur lors de la mise √† jour des d√©pendances"
    
    print_step "Restauration de la sauvegarde..."
    cp $BACKUP_DIR/package.json ./
    npm install
    
    print_error "Mise √† jour √©chou√©e. Sauvegarde restaur√©e."
    exit 1
fi

# Test de build
print_step "Test de build de la nouvelle version..."
npm run build

if [ $? -eq 0 ]; then
    print_success "Build r√©ussi"
    rm -rf dist
else
    print_error "Erreur lors du build"
    
    print_step "Restauration de la sauvegarde..."
    cp -r $BACKUP_DIR/* ./
    npm install
    
    print_error "Build √©chou√©. Sauvegarde restaur√©e."
    exit 1
fi

# Mise √† jour des fonctions Supabase si n√©cessaire
if command -v supabase &> /dev/null; then
    if [ -d "supabase/functions" ]; then
        read -p "Voulez-vous mettre √† jour les fonctions Supabase? (y/N): " UPDATE_FUNCTIONS
        
        if [[ $UPDATE_FUNCTIONS =~ ^[Yy]$ ]]; then
            print_step "Mise √† jour des fonctions Supabase..."
            supabase functions deploy server
            
            if [ $? -eq 0 ]; then
                print_success "Fonctions Supabase mises √† jour"
            else
                print_warning "Erreur lors de la mise √† jour des fonctions"
            fi
        fi
    fi
fi

# Red√©marrage des services Docker si actif
if command -v docker-compose &> /dev/null && [ -f "docker-compose.yml" ]; then
    if docker-compose ps | grep -q "Up"; then
        read -p "Services Docker d√©tect√©s. Voulez-vous les red√©marrer? (y/N): " RESTART_DOCKER
        
        if [[ $RESTART_DOCKER =~ ^[Yy]$ ]]; then
            print_step "Red√©marrage des services Docker..."
            docker-compose down
            docker-compose build --no-cache app
            docker-compose up -d
            print_success "Services Docker red√©marr√©s"
        fi
    fi
fi

# Nettoyage des anciennes sauvegardes (garde les 5 derni√®res)
print_step "Nettoyage des anciennes sauvegardes..."
cd backups && ls -t | tail -n +6 | xargs -r rm -rf && cd ..

NEW_VERSION=$(cat package.json | grep '"version"' | cut -d'"' -f4)

echo ""
echo "================================"
print_success "Mise √† jour termin√©e avec succ√®s!"
echo "================================"
echo ""
echo "üìä R√©sum√©:"
echo "   ‚Ä¢ Version pr√©c√©dente: $CURRENT_VERSION"
echo "   ‚Ä¢ Nouvelle version: $NEW_VERSION"
echo "   ‚Ä¢ Sauvegarde: $BACKUP_DIR"
echo ""
echo "üöÄ Prochaines √©tapes:"
echo "   1. Testez l'application: npm run dev"
echo "   2. V√©rifiez les fonctionnalit√©s critiques"
echo "   3. D√©ployez en production si tout fonctionne"
echo ""
print_success "Mise √† jour r√©ussie ! ‚ú®"