#!/usr/bin/env node

/**
 * Script de v√©rification avant build pour Vercel
 * V√©rifie que tous les fichiers requis sont pr√©sents
 */

const fs = require('fs');
const path = require('path');

const REQUIRED_FILES = [
  'package.json',
  'tsconfig.json', 
  'tsconfig.node.json',
  'vite.config.ts',
  'index.html',
  'main.tsx',
  'App.tsx',
  'vite-env.d.ts',
  'styles/globals.css'
];

const REQUIRED_DIRS = [
  'components',
  'utils', 
  'types',
  'styles'
];

console.log('üîç V√©rification des fichiers requis pour le build...\n');

let hasErrors = false;

// V√©rification des fichiers
REQUIRED_FILES.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
    hasErrors = true;
  }
});

console.log('');

// V√©rification des dossiers
REQUIRED_DIRS.forEach(dir => {
  if (fs.existsSync(dir) && fs.statSync(dir).isDirectory()) {
    console.log(`‚úÖ ${dir}/`);
  } else {
    console.log(`‚ùå ${dir}/ - MANQUANT`);
    hasErrors = true;
  }
});

console.log('');

// V√©rification du package.json
try {
  const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  console.log('üì¶ V√©rification package.json:');
  
  if (pkg.scripts && pkg.scripts.build) {
    console.log(`‚úÖ Script build: ${pkg.scripts.build}`);
  } else {
    console.log('‚ùå Script build manquant');
    hasErrors = true;
  }
  
  if (pkg.dependencies && pkg.dependencies.react) {
    console.log(`‚úÖ React: ${pkg.dependencies.react}`);
  } else {
    console.log('‚ùå D√©pendance React manquante');
    hasErrors = true;
  }
  
  if (pkg.devDependencies && pkg.devDependencies.vite) {
    console.log(`‚úÖ Vite: ${pkg.devDependencies.vite}`);
  } else {
    console.log('‚ùå Vite manquant dans devDependencies');
    hasErrors = true;
  }
  
  if (pkg.devDependencies && pkg.devDependencies.typescript) {
    console.log(`‚úÖ TypeScript: ${pkg.devDependencies.typescript}`);
  } else {
    console.log('‚ùå TypeScript manquant dans devDependencies');
    hasErrors = true;
  }
  
} catch (error) {
  console.log('‚ùå Erreur lecture package.json:', error.message);
  hasErrors = true;
}

console.log('');

// V√©rification des variables d'environnement pour le build local
console.log('üîß Variables d'environnement de build:');
const envVars = [
  'NODE_ENV',
  'VITE_SUPABASE_URL', 
  'VITE_SUPABASE_ANON_KEY'
];

envVars.forEach(varName => {
  if (process.env[varName]) {
    console.log(`‚úÖ ${varName}: ${varName.includes('KEY') ? '[CONFIGUR√â]' : process.env[varName]}`);
  } else {
    console.log(`‚ö†Ô∏è  ${varName}: non d√©fini (peut √™tre configur√© sur Vercel)`);
  }
});

console.log('');

// R√©sum√©
if (hasErrors) {
  console.log('‚ùå ERREURS D√âTECT√âES - Le build risque d\'√©chouer');
  console.log('Corrigez les erreurs ci-dessus avant de d√©ployer.\n');
  process.exit(1);
} else {
  console.log('‚úÖ TOUT EST PR√äT - Le build devrait r√©ussir');
  console.log('Vous pouvez d√©ployer en toute s√©curit√©.\n');
  
  console.log('üöÄ Prochaines √©tapes:');
  console.log('1. Commit et push vers GitHub');
  console.log('2. Vercel d√©ploiera automatiquement');
  console.log('3. V√©rifier les variables d\'environnement sur Vercel');
  console.log('');
  
  process.exit(0);
}